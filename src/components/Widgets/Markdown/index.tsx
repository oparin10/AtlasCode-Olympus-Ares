import React from "react";
import {
  buttonList,
  SunEditorReactProps,
  default as MarkdownAres,
} from "suneditor-react";
import "suneditor/dist/css/suneditor.min.css";
import validURL from "../../../helper/isURL";

interface Props {}

type MarkdownImageDataset = {
  fileName: string;
  index: number;
  src: string;
  isBase64: boolean;
  altText: string;
};

const Markdown = (props: Props) => {
  const editorRef = React.useRef<any | null>(null);

  const [imgNodeData, setImgNodeData] = React.useState<
    Array<MarkdownImageDataset>
  >([]);
  const [htmlContent, setHtmlContent] = React.useState<string>("");

  React.useEffect(() => {
    if (editorRef.current !== null) {
      console.log(editorRef.current.editor);
    }
  }, []);

  const parseAndReplaceImages = () => {
    let htmlContentLocal = htmlContent;
    let imgNodeDataLocal = imgNodeData;

    let HTMLDocumentParser = document.createElement("div");

    HTMLDocumentParser.insertAdjacentHTML("beforeend", htmlContentLocal);

    try {
      let htmlImgNodes = HTMLDocumentParser.querySelectorAll(
        ".se-image-container"
      );

      for (let i = 0; i < htmlImgNodes.length; i++) {
        const HTMLimgNode = htmlImgNodes[i].lastChild!.lastChild as
          | ChildNode
          | any;
        const imgNodeMap: MarkdownImageDataset = imgNodeDataLocal[i];

        if (HTMLimgNode.dataset.index == imgNodeMap.index) {
          HTMLimgNode.dataset.fileName =
            imgNodeMap.fileName + "cu" + i.toString();
        }
      }

      HTMLDocumentParser.querySelectorAll(".se-image-container").forEach(
        (item: Element | any) => {
          console.log(item.lastChild.lastChild);
        }
      );
    } catch (error) {}
  };

  const parseHTMLbeforeCreate = () => {
    // Get raw HTML string generated by SunEditor
    let rawHtmlString = editorRef.current.editor.getContents();

    // Create HTML element and append raw string to it to implicitly convert to a documet node tree
    let HTMLDocumentInstance = document.createElement("div");

    HTMLDocumentInstance.insertAdjacentHTML("beforeend", rawHtmlString);

    // Attempts to find img nodes

    try {
      let imageElementDataset: Array<MarkdownImageDataset> = [];

      // If image node wrappers are found, populates an object with information about images that were found
      let imgElements = HTMLDocumentInstance.querySelectorAll(
        ".se-image-container"
      ).forEach((imgElementWrapper: Element | any) => {
        let imageElement = imgElementWrapper.lastChild.lastChild;

        let fileName = imageElement.dataset.fileName.replace(/\.[^/.]+$/, "");

        // Verifies eitheir image comes from an URL already or not, if it does, does not inclues in the object mapping because of the assumption that it must be an image already optimized and in the Cloud
        let isURL = !validURL(imageElement.src);

        imageElementDataset.push({
          fileName: fileName,
          index: imageElement.dataset.index,
          src: imageElement.src,
          isBase64: isURL,
          altText: imageElement.alt,
        });
      });

      editorRef.current.editor.setContents(HTMLDocumentInstance.innerHTML);

      let rawHTMLCurrent = editorRef.current.editor.getContents();

      setImgNodeData(imageElementDataset);
      setHtmlContent(rawHTMLCurrent);
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div
      style={{
        display: "flex",
        justifyContent: "center",
        marginTop: "15vh",
        flexDirection: "column",
        alignItems: "center",
      }}
    >
      <MarkdownAres
        lang="pt_br"
        ref={editorRef}
        width="75%"
        onChange={(e) => {}}
        height="auto"
        setOptions={{
          imageFileInput: true,
          buttonList: buttonList.complex,
          mode: "classic",
          charCounter: true,
          charCounterType: "char",
        }}
      ></MarkdownAres>

      <button onClick={parseHTMLbeforeCreate}>Parse HTML</button>

      <button onClick={() => console.log(imgNodeData)}>Get image nodes</button>

      <button onClick={() => console.log(htmlContent)}>Get HTML content</button>
    </div>
  );
};

export default Markdown;
